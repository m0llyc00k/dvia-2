{"filter":false,"title":"script.js","tooltip":"/Final/rats/Graph-rats/script.js","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":391,"column":0},"action":"insert","lines":["/**","*","*","*","*\tNOTES:","*\t\t[1] Slider could be improved. No displayed limits. Values are hidden. Etc.","*\t\t[2] This chart's API is restricted and makes assumptions. E.g., legend entries provided to 'rose' and 'legend' are the same.","*","*","*","*\t@author Kristofer Gryte. http://www.kgryte.com","*","*","*/","","","","","var Chart = {};","","Chart.rose = function() {","","\tvar margin = {'top': 20, 'right': 20, 'bottom': 20, 'left': 20},","\t\theight = 500,","\t\twidth = 500,","\t\tcolor = 'rgb(0,0,0)',","\t\tarea = function(d) { return [d.y]; },","\t\tangle = function(d) { return d.x; },","\t\tradiusScale = d3.scale.linear(),","\t\tangleScale = d3.scale.linear().range( [Math.PI, 3*Math.PI ] ),","\t\tdomain = [0, 1],","\t\tlegend = [''],","\t\tlabel = function(d) { return d.label; },","\t\tdelay = 1000,","\t\tduration = 100,","\t\tcanvas, graph, centerX, centerY, numWedges, wedgeGroups, wedges, legendGroup;","","\t// Arc Generator:","\tvar arc = d3.svg.arc()","\t\t.innerRadius( 0 )","\t\t.outerRadius( function(d,i) { return radiusScale( d.radius ); } )","\t\t.startAngle( function(d,i) { return angleScale( d.angle ); } );","","\tfunction chart( selection ) {","","\t\tselection.each( function( data ) {","","\t\t\t// Determine the number of wedges:","\t\t\tnumWedges = data.length;","","\t\t\t// Standardize the data:","\t\t\tdata = formatData( data );","","\t\t\t// Update the chart parameters:","\t\t\tupdateParams();","","\t\t\t// Create the chart base:","\t\t\tcreateBase( this );","","\t\t\t// Create the wedges:","\t\t\tcreateWedges( data );","","\t\t});","","\t}; // end FUNCTION chart()","","\t//","\tfunction formatData( data ) {","\t\t// Convert data to standard representation; needed for non-deterministic accessors:","\t\tdata = data.map( function(d, i) {","\t\t\treturn {","\t\t\t\t'angle': angle.call(data, d, i),","\t\t\t\t'area': area.call(data, d, i),","\t\t\t\t'label': label.call(data, d, i)\t\t\t","\t\t\t};","\t\t});","","\t\t// Now convert the area values to radii:","\t\t// http://understandinguncertainty.org/node/214 ","\t\treturn data.map( function(d, i) {","\t\t\treturn {","\t\t\t\t'angle': d.angle,","\t\t\t\t'label': d.label,","\t\t\t\t'radius': d.area.map( function(area) {","\t\t\t\t\treturn Math.sqrt( area*numWedges / Math.PI );","\t\t\t\t})","\t\t\t}","\t\t})","\t}; // end FUNCTION formatData()","","\t//","\tfunction updateParams() {","\t\t// Update the arc generator:","\t\tarc.endAngle( function(d,i) { return angleScale( d.angle ) + (Math.PI / (numWedges/2)); } );","","\t\t// Determine the chart center:","\t\tcenterX = (width - margin.left - margin.right) / 2;","\t\tcenterY = (height - margin.top - margin.bottom) / 2;","","\t\t// Update the radius scale:","\t\tradiusScale.domain( domain )","\t\t\t.range( [0, d3.min( [centerX, centerY] ) ] );","","\t\t// Update the angle scale:","\t\tangleScale.domain( [0, numWedges] );\t\t","\t}; // end FUNCTION updateParams()","","\t// ","\tfunction createBase( selection ) {","","\t\t// Create the SVG element:","\t\tcanvas = d3.select( selection ).append('svg:svg')","\t\t\t.attr('width', width)","\t\t\t.attr('height', height)","\t\t\t.attr('class', 'canvas');","","\t\t// Create the graph element:","\t\tgraph = canvas.append('svg:g')","\t\t\t.attr('class', 'graph')","\t\t\t.attr('transform', 'translate(' + (centerX + margin.left) + ',' + (centerY + margin.top) + ')');","","\t}; // end FUNCTION createBase()","","","\tfunction createWedges( data ) {","","\t\t// Create the wedge groups:","\t\twedgeGroups = graph.selectAll('.wedgeGroup')","\t\t\t.data( data )","\t\t  .enter().append('svg:g')","\t\t  \t.attr('class', 'wedgeGroup')","\t\t  \t.attr('transform', 'scale(0,0)');","","\t\t// Create the wedges:","\t\twedges = wedgeGroups.selectAll('.wedge')","\t\t  \t.data( function(d) { ","\t\t  \t\tvar ids = d3.range(0, legend.length);","","\t\t  \t\tids.sort( function(a,b) { ","\t\t\t  \t\tvar val2 = d.radius[b],","\t\t\t  \t\t\tval1 = d.radius[a]","\t\t\t  \t\treturn  val2 - val1; ","\t\t\t  \t});","\t\t\t  \treturn ids.map( function(i) {","\t\t\t  \t\treturn {","\t\t\t  \t\t\t'legend': legend[i],","\t\t\t  \t\t\t'radius': d.radius[i],","\t\t\t  \t\t\t'angle': d.angle","\t\t\t  \t\t};","\t\t\t  \t});","\t\t  \t})","\t\t  .enter().append('svg:path')","\t\t  \t.attr('class', function(d) { return 'wedge ' + d.legend; })","\t\t  \t.attr('d', arc );","","\t\t// Append title tooltips:","\t\twedges.append('svg:title')","\t\t\t.text( function(d) { return d.legend + ': ' + Math.floor(Math.pow(d.radius,2) * Math.PI / numWedges); });","","\t\t// Transition the wedges to view:","\t\twedgeGroups.transition()","\t\t\t.delay( delay )","\t\t\t.duration( function(d,i) { ","\t\t\t\treturn duration*i;","\t\t\t})","\t\t\t.attr('transform', 'scale(1,1)');","","\t\t// Append labels to the wedgeGroups:","\t\tvar numLabels = d3.selectAll('.label-path')[0].length;","\t\t","\t\twedgeGroups.selectAll('.label-path')","\t\t\t.data( function(d,i) { ","\t\t\t\treturn [","\t\t\t\t\t{","\t\t\t\t\t\t'index': i,","\t\t\t\t\t\t'angle': d.angle,","\t\t\t\t\t\t'radius': d3.max( d.radius.concat( [23] ) )","\t\t\t\t\t}","\t\t\t\t];","\t\t\t} )","\t\t  .enter().append('svg:path')","\t\t  \t.attr('class', 'label-path')","\t\t  \t.attr('id', function(d) {","\t\t  \t\treturn 'label-path' + (d.index + numLabels);","\t\t  \t})","\t\t\t.attr('d', arc)","\t\t  \t.attr('fill', 'none')","\t\t  \t.attr('stroke', 'none');","","\t\twedgeGroups.selectAll('.label')","\t\t\t.data( function(d,i) { ","\t\t\t\treturn [","\t\t\t\t\t{","\t\t\t\t\t\t'index': i,","\t\t\t\t\t\t'label': d.label","\t\t\t\t\t}","\t\t\t\t];","\t\t\t} )","\t\t  .enter().append('svg:text')","\t   \t\t.attr('class', 'label')","\t   \t\t.attr('text-anchor', 'start')","\t   \t\t.attr('x', 5)","\t   \t\t.attr('dy', '-.71em')","\t   \t\t.attr('text-align', 'center')","\t  \t\t.append('textPath')","\t  \t\t\t.attr('xlink:href', function(d,i) { ","\t  \t\t\t\treturn '#label-path' + (d.index + numLabels);","\t  \t\t\t})","\t  \t\t\t.text( function(d) { return d.label; } );","","\t}; // end FUNCTION createWedges()\t","","\t// Set/Get: margin","\tchart.margin = function( _ ) {","\t\tif (!arguments.length) return margin;","\t\tmargin = _;","\t\treturn chart;","\t};","","\t// Set/Get: width","\tchart.width = function( _ ) {","\t\tif (!arguments.length) return width;","\t\twidth = _;","\t\treturn chart;","\t};","","\t// Set/Get: height","\tchart.height = function( _ ) {","\t\tif (!arguments.length) return height;","\t\theight = _;","\t\treturn chart;","\t};","","\t// Set/Get: area","\tchart.area = function( _ ) {","\t\tif (!arguments.length) return area;","\t\tarea = _;","\t\treturn chart;","\t};","","\t// Set/Get: angle","\tchart.angle = function( _ ) {","\t\tif (!arguments.length) return angle;","\t\tangle = _;","\t\treturn chart;","\t};","","\t// Set/Get: label","\tchart.label = function( _ ) {","\t\tif (!arguments.length) return label;","\t\tlabel = _;","\t\treturn chart;","\t};","","\t// Set/Get: domain","\tchart.domain = function( _ ) {","\t\tif (!arguments.length) return domain;","\t\tdomain = _;","\t\treturn chart;","\t};","","\t// Set/Get: legend","\tchart.legend = function( _ ) {","\t\tif (!arguments.length) return legend;","\t\tlegend = _;","\t\treturn chart;","\t};","","\t// Set/Get: delay","\tchart.delay = function( _ ) {","\t\tif (!arguments.length) return delay;","\t\tdelay = _;","\t\treturn chart;","\t};","","\t// Set/Get: duration","\tchart.duration = function( _ ) {","\t\tif (!arguments.length) return duration;","\t\tduration = _;","\t\treturn chart;","\t};","","\treturn chart;","","}; // end FUNCTION rose()","","","","","","Chart.legend = function( entries ) {","\t// NOTE: positioning handled by CSS.","","\t// Add a legend:","\tvar legend = {}, ","\t\theight,","\t\tsymbolRadius = 5;","","\tlegend.container = d3.select('body').append('div')","\t\t.attr('class', 'legend');","","\theight = parseInt( d3.select('.legend').style('height'), 10);","\tlegend.canvas = legend.container.append('svg:svg')","\t\t\t.attr('class', 'legend-canvas');","","\tlegend.entries = legend.canvas.selectAll('.legend-entry')","\t\t.data( entries )","\t  .enter().append('svg:g')","\t  \t.attr('class', 'legend-entry')","\t  \t.attr('transform', function(d,i) { return 'translate('+ (symbolRadius + i*120) +', ' + (height/2) + ')'; });","","\t// Append circles to each entry with appropriate class:","\tlegend.entries.append('svg:circle')","\t\t.attr('class', function(d) { return 'legend-symbol ' + d;} )","\t\t.attr('r', symbolRadius )","\t\t.attr('cy', 0 )","\t\t.attr('cx', 0 );","","\t// Append text to each entry:","\tlegend.entries.append('svg:text')","\t\t.attr('class', 'legend-text' )","\t\t.attr('text-anchor', 'start')","\t\t.attr('dy', '.35em')","\t\t.attr('transform', 'translate(' + (symbolRadius*2) + ',0)')","\t\t.text( function(d) { return d; } );","","\t// Add interactivity:","\tlegend.entries.on('mouseover.focus', mouseover)","\t\t.on('mouseout.focus', mouseout);","","\t//","\tfunction mouseover() {","","\t\t// Select the current element and get the symbol child class:","\t\tvar _class = d3.select( this ).select('.legend-symbol')","\t\t\t.attr('class')","\t\t\t.replace('legend-symbol ', ''); // left with legend class.","","\t\td3.selectAll('.wedge')","\t\t\t.filter( function(d,i) {","\t\t\t\t// Select those elements not belonging to the same symbol class:","\t\t\t\treturn !d3.select( this ).classed( _class );","\t\t\t})","\t\t\t.transition()","\t\t\t\t.duration( 1000 )","\t\t\t\t.attr('opacity', 0.05 );","","\t}; // end FUNCTION mouseover()","","\tfunction mouseout() {","","\t\td3.selectAll('.wedge')","\t\t\t.transition()","\t\t\t\t.duration( 500 )","\t\t\t\t.attr('opacity', 1 );","","\t}; // end FUNCTION mouseout()","","}; // end FUNCTION legend()","","","Chart.slider = function( minVal, maxVal, step ) {","","\td3.select('body').append('input')","\t\t.attr('class', 'slider')","\t\t.attr('type', 'range')","\t\t.attr('name', 'slider')","\t\t.attr('min', minVal)","\t\t.attr('max', maxVal)","\t\t.attr('step', 0.001)","\t\t.attr('value', maxVal);","","\td3.select(\"input\").on(\"change\", function() {","\t  var value = Math.round(this.value);","","\t  d3.selectAll('.wedgeGroup')","\t  \t.filter( function(d,i) { return i < value; } )","\t  \t.transition()","\t  \t\t.duration( 500 )","\t  \t\t.attr( 'transform', 'scale(1,1)');","\t  ","\t  d3.selectAll('.wedgeGroup')","\t  \t.filter( function(d,i) { return i >= value; } )","\t  \t.transition()","\t  \t\t.duration( 500 )","\t  \t\t.attr( 'transform', 'scale(0,0)' );","","\t});","","","}; // end FUNCTION slider()",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":391,"column":0},"action":"remove","lines":["/**","*","*","*","*\tNOTES:","*\t\t[1] Slider could be improved. No displayed limits. Values are hidden. Etc.","*\t\t[2] This chart's API is restricted and makes assumptions. E.g., legend entries provided to 'rose' and 'legend' are the same.","*","*","*","*\t@author Kristofer Gryte. http://www.kgryte.com","*","*","*/","","","","","var Chart = {};","","Chart.rose = function() {","","\tvar margin = {'top': 20, 'right': 20, 'bottom': 20, 'left': 20},","\t\theight = 500,","\t\twidth = 500,","\t\tcolor = 'rgb(0,0,0)',","\t\tarea = function(d) { return [d.y]; },","\t\tangle = function(d) { return d.x; },","\t\tradiusScale = d3.scale.linear(),","\t\tangleScale = d3.scale.linear().range( [Math.PI, 3*Math.PI ] ),","\t\tdomain = [0, 1],","\t\tlegend = [''],","\t\tlabel = function(d) { return d.label; },","\t\tdelay = 1000,","\t\tduration = 100,","\t\tcanvas, graph, centerX, centerY, numWedges, wedgeGroups, wedges, legendGroup;","","\t// Arc Generator:","\tvar arc = d3.svg.arc()","\t\t.innerRadius( 0 )","\t\t.outerRadius( function(d,i) { return radiusScale( d.radius ); } )","\t\t.startAngle( function(d,i) { return angleScale( d.angle ); } );","","\tfunction chart( selection ) {","","\t\tselection.each( function( data ) {","","\t\t\t// Determine the number of wedges:","\t\t\tnumWedges = data.length;","","\t\t\t// Standardize the data:","\t\t\tdata = formatData( data );","","\t\t\t// Update the chart parameters:","\t\t\tupdateParams();","","\t\t\t// Create the chart base:","\t\t\tcreateBase( this );","","\t\t\t// Create the wedges:","\t\t\tcreateWedges( data );","","\t\t});","","\t}; // end FUNCTION chart()","","\t//","\tfunction formatData( data ) {","\t\t// Convert data to standard representation; needed for non-deterministic accessors:","\t\tdata = data.map( function(d, i) {","\t\t\treturn {","\t\t\t\t'angle': angle.call(data, d, i),","\t\t\t\t'area': area.call(data, d, i),","\t\t\t\t'label': label.call(data, d, i)\t\t\t","\t\t\t};","\t\t});","","\t\t// Now convert the area values to radii:","\t\t// http://understandinguncertainty.org/node/214 ","\t\treturn data.map( function(d, i) {","\t\t\treturn {","\t\t\t\t'angle': d.angle,","\t\t\t\t'label': d.label,","\t\t\t\t'radius': d.area.map( function(area) {","\t\t\t\t\treturn Math.sqrt( area*numWedges / Math.PI );","\t\t\t\t})","\t\t\t}","\t\t})","\t}; // end FUNCTION formatData()","","\t//","\tfunction updateParams() {","\t\t// Update the arc generator:","\t\tarc.endAngle( function(d,i) { return angleScale( d.angle ) + (Math.PI / (numWedges/2)); } );","","\t\t// Determine the chart center:","\t\tcenterX = (width - margin.left - margin.right) / 2;","\t\tcenterY = (height - margin.top - margin.bottom) / 2;","","\t\t// Update the radius scale:","\t\tradiusScale.domain( domain )","\t\t\t.range( [0, d3.min( [centerX, centerY] ) ] );","","\t\t// Update the angle scale:","\t\tangleScale.domain( [0, numWedges] );\t\t","\t}; // end FUNCTION updateParams()","","\t// ","\tfunction createBase( selection ) {","","\t\t// Create the SVG element:","\t\tcanvas = d3.select( selection ).append('svg:svg')","\t\t\t.attr('width', width)","\t\t\t.attr('height', height)","\t\t\t.attr('class', 'canvas');","","\t\t// Create the graph element:","\t\tgraph = canvas.append('svg:g')","\t\t\t.attr('class', 'graph')","\t\t\t.attr('transform', 'translate(' + (centerX + margin.left) + ',' + (centerY + margin.top) + ')');","","\t}; // end FUNCTION createBase()","","","\tfunction createWedges( data ) {","","\t\t// Create the wedge groups:","\t\twedgeGroups = graph.selectAll('.wedgeGroup')","\t\t\t.data( data )","\t\t  .enter().append('svg:g')","\t\t  \t.attr('class', 'wedgeGroup')","\t\t  \t.attr('transform', 'scale(0,0)');","","\t\t// Create the wedges:","\t\twedges = wedgeGroups.selectAll('.wedge')","\t\t  \t.data( function(d) { ","\t\t  \t\tvar ids = d3.range(0, legend.length);","","\t\t  \t\tids.sort( function(a,b) { ","\t\t\t  \t\tvar val2 = d.radius[b],","\t\t\t  \t\t\tval1 = d.radius[a]","\t\t\t  \t\treturn  val2 - val1; ","\t\t\t  \t});","\t\t\t  \treturn ids.map( function(i) {","\t\t\t  \t\treturn {","\t\t\t  \t\t\t'legend': legend[i],","\t\t\t  \t\t\t'radius': d.radius[i],","\t\t\t  \t\t\t'angle': d.angle","\t\t\t  \t\t};","\t\t\t  \t});","\t\t  \t})","\t\t  .enter().append('svg:path')","\t\t  \t.attr('class', function(d) { return 'wedge ' + d.legend; })","\t\t  \t.attr('d', arc );","","\t\t// Append title tooltips:","\t\twedges.append('svg:title')","\t\t\t.text( function(d) { return d.legend + ': ' + Math.floor(Math.pow(d.radius,2) * Math.PI / numWedges); });","","\t\t// Transition the wedges to view:","\t\twedgeGroups.transition()","\t\t\t.delay( delay )","\t\t\t.duration( function(d,i) { ","\t\t\t\treturn duration*i;","\t\t\t})","\t\t\t.attr('transform', 'scale(1,1)');","","\t\t// Append labels to the wedgeGroups:","\t\tvar numLabels = d3.selectAll('.label-path')[0].length;","\t\t","\t\twedgeGroups.selectAll('.label-path')","\t\t\t.data( function(d,i) { ","\t\t\t\treturn [","\t\t\t\t\t{","\t\t\t\t\t\t'index': i,","\t\t\t\t\t\t'angle': d.angle,","\t\t\t\t\t\t'radius': d3.max( d.radius.concat( [23] ) )","\t\t\t\t\t}","\t\t\t\t];","\t\t\t} )","\t\t  .enter().append('svg:path')","\t\t  \t.attr('class', 'label-path')","\t\t  \t.attr('id', function(d) {","\t\t  \t\treturn 'label-path' + (d.index + numLabels);","\t\t  \t})","\t\t\t.attr('d', arc)","\t\t  \t.attr('fill', 'none')","\t\t  \t.attr('stroke', 'none');","","\t\twedgeGroups.selectAll('.label')","\t\t\t.data( function(d,i) { ","\t\t\t\treturn [","\t\t\t\t\t{","\t\t\t\t\t\t'index': i,","\t\t\t\t\t\t'label': d.label","\t\t\t\t\t}","\t\t\t\t];","\t\t\t} )","\t\t  .enter().append('svg:text')","\t   \t\t.attr('class', 'label')","\t   \t\t.attr('text-anchor', 'start')","\t   \t\t.attr('x', 5)","\t   \t\t.attr('dy', '-.71em')","\t   \t\t.attr('text-align', 'center')","\t  \t\t.append('textPath')","\t  \t\t\t.attr('xlink:href', function(d,i) { ","\t  \t\t\t\treturn '#label-path' + (d.index + numLabels);","\t  \t\t\t})","\t  \t\t\t.text( function(d) { return d.label; } );","","\t}; // end FUNCTION createWedges()\t","","\t// Set/Get: margin","\tchart.margin = function( _ ) {","\t\tif (!arguments.length) return margin;","\t\tmargin = _;","\t\treturn chart;","\t};","","\t// Set/Get: width","\tchart.width = function( _ ) {","\t\tif (!arguments.length) return width;","\t\twidth = _;","\t\treturn chart;","\t};","","\t// Set/Get: height","\tchart.height = function( _ ) {","\t\tif (!arguments.length) return height;","\t\theight = _;","\t\treturn chart;","\t};","","\t// Set/Get: area","\tchart.area = function( _ ) {","\t\tif (!arguments.length) return area;","\t\tarea = _;","\t\treturn chart;","\t};","","\t// Set/Get: angle","\tchart.angle = function( _ ) {","\t\tif (!arguments.length) return angle;","\t\tangle = _;","\t\treturn chart;","\t};","","\t// Set/Get: label","\tchart.label = function( _ ) {","\t\tif (!arguments.length) return label;","\t\tlabel = _;","\t\treturn chart;","\t};","","\t// Set/Get: domain","\tchart.domain = function( _ ) {","\t\tif (!arguments.length) return domain;","\t\tdomain = _;","\t\treturn chart;","\t};","","\t// Set/Get: legend","\tchart.legend = function( _ ) {","\t\tif (!arguments.length) return legend;","\t\tlegend = _;","\t\treturn chart;","\t};","","\t// Set/Get: delay","\tchart.delay = function( _ ) {","\t\tif (!arguments.length) return delay;","\t\tdelay = _;","\t\treturn chart;","\t};","","\t// Set/Get: duration","\tchart.duration = function( _ ) {","\t\tif (!arguments.length) return duration;","\t\tduration = _;","\t\treturn chart;","\t};","","\treturn chart;","","}; // end FUNCTION rose()","","","","","","Chart.legend = function( entries ) {","\t// NOTE: positioning handled by CSS.","","\t// Add a legend:","\tvar legend = {}, ","\t\theight,","\t\tsymbolRadius = 5;","","\tlegend.container = d3.select('body').append('div')","\t\t.attr('class', 'legend');","","\theight = parseInt( d3.select('.legend').style('height'), 10);","\tlegend.canvas = legend.container.append('svg:svg')","\t\t\t.attr('class', 'legend-canvas');","","\tlegend.entries = legend.canvas.selectAll('.legend-entry')","\t\t.data( entries )","\t  .enter().append('svg:g')","\t  \t.attr('class', 'legend-entry')","\t  \t.attr('transform', function(d,i) { return 'translate('+ (symbolRadius + i*120) +', ' + (height/2) + ')'; });","","\t// Append circles to each entry with appropriate class:","\tlegend.entries.append('svg:circle')","\t\t.attr('class', function(d) { return 'legend-symbol ' + d;} )","\t\t.attr('r', symbolRadius )","\t\t.attr('cy', 0 )","\t\t.attr('cx', 0 );","","\t// Append text to each entry:","\tlegend.entries.append('svg:text')","\t\t.attr('class', 'legend-text' )","\t\t.attr('text-anchor', 'start')","\t\t.attr('dy', '.35em')","\t\t.attr('transform', 'translate(' + (symbolRadius*2) + ',0)')","\t\t.text( function(d) { return d; } );","","\t// Add interactivity:","\tlegend.entries.on('mouseover.focus', mouseover)","\t\t.on('mouseout.focus', mouseout);","","\t//","\tfunction mouseover() {","","\t\t// Select the current element and get the symbol child class:","\t\tvar _class = d3.select( this ).select('.legend-symbol')","\t\t\t.attr('class')","\t\t\t.replace('legend-symbol ', ''); // left with legend class.","","\t\td3.selectAll('.wedge')","\t\t\t.filter( function(d,i) {","\t\t\t\t// Select those elements not belonging to the same symbol class:","\t\t\t\treturn !d3.select( this ).classed( _class );","\t\t\t})","\t\t\t.transition()","\t\t\t\t.duration( 1000 )","\t\t\t\t.attr('opacity', 0.05 );","","\t}; // end FUNCTION mouseover()","","\tfunction mouseout() {","","\t\td3.selectAll('.wedge')","\t\t\t.transition()","\t\t\t\t.duration( 500 )","\t\t\t\t.attr('opacity', 1 );","","\t}; // end FUNCTION mouseout()","","}; // end FUNCTION legend()","","","Chart.slider = function( minVal, maxVal, step ) {","","\td3.select('body').append('input')","\t\t.attr('class', 'slider')","\t\t.attr('type', 'range')","\t\t.attr('name', 'slider')","\t\t.attr('min', minVal)","\t\t.attr('max', maxVal)","\t\t.attr('step', 0.001)","\t\t.attr('value', maxVal);","","\td3.select(\"input\").on(\"change\", function() {","\t  var value = Math.round(this.value);","","\t  d3.selectAll('.wedgeGroup')","\t  \t.filter( function(d,i) { return i < value; } )","\t  \t.transition()","\t  \t\t.duration( 500 )","\t  \t\t.attr( 'transform', 'scale(1,1)');","\t  ","\t  d3.selectAll('.wedgeGroup')","\t  \t.filter( function(d,i) { return i >= value; } )","\t  \t.transition()","\t  \t\t.duration( 500 )","\t  \t\t.attr( 'transform', 'scale(0,0)' );","","\t});","","","}; // end FUNCTION slider()",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":39,"column":4},"action":"insert","lines":["(function(global, factory) {","  typeof exports === \"object\" && typeof module !== \"undefined\" ? factory(exports, require(\"d3-scale\")) :","  typeof define === \"function\" && define.amd ? define([\"exports\", \"d3-scale\"], factory) :","  (factory(global.d3 = global.d3 || {}, global.d3));","}(this, function(exports, d3Scale) {","  'use strict';","","  function square(x) {","    return x * x;","  }","","  function radial() {","    var linear = d3Scale.scaleLinear();","","    function scale(x) {","      return Math.sqrt(linear(x));","    }","","    scale.domain = function(_) {","      return arguments.length ? (linear.domain(_), scale) : linear.domain();","    };","","    scale.nice = function(count) {","      return (linear.nice(count), scale);","    };","","    scale.range = function(_) {","      return arguments.length ? (linear.range(_.map(square)), scale) : linear.range().map(Math.sqrt);","    };","","    scale.ticks = linear.ticks;","    scale.tickFormat = linear.tickFormat;","","    return scale;","  }","","  exports.scaleRadial = radial;","","  Object.defineProperty(exports, '__esModule', {value: true});","}));"],"id":3}]]},"ace":{"folds":[],"scrolltop":247,"scrollleft":0,"selection":{"start":{"row":39,"column":4},"end":{"row":39,"column":4},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":12,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1638748924282,"hash":"2c62bd10988c8fad1a4398f614ed4138f0e26397"}